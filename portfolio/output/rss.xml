<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Miguel Fiandor - Data Analyst &amp; Engineer</title><link>https://my-portfolio-app-hxdx6.ondigitalocean.app/</link><description>Miguel Fiandor Data Analyst &amp; Engineer Freelance Site</description><atom:link href="https://my-portfolio-app-hxdx6.ondigitalocean.app/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:miguel.fiandor.gutierrez@gmail.com"&gt;Miguel Fiandor&lt;/a&gt; </copyright><lastBuildDate>Fri, 29 Aug 2025 18:53:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Ollama day-1 guide</title><link>https://my-portfolio-app-hxdx6.ondigitalocean.app/posts/ollama-day-1-guide/</link><dc:creator>Miguel Fiandor</dc:creator><description>&lt;p&gt;After installing &lt;a href="https://ollama.com/"&gt;&lt;strong&gt;Ollama&lt;/strong&gt;&lt;/a&gt;, quickly start using local AI models on Linux or macOS with a few lean commands in the terminal.&lt;/p&gt;
&lt;h3&gt;Installing and First Use&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Install via shell:
&lt;code&gt;curl https://ollama.ai/install.sh | sh&lt;/code&gt;
This sets up Ollama on Linux/Mac.&lt;/li&gt;
&lt;li&gt;Run your first model:
&lt;code&gt;ollama run llama3.2:3b&lt;/code&gt;
This downloads and runs the selected model, opening an interactive chat.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Quick Reference Table&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;Command&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;ollama run model_name&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Run model in chat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;ollama list&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;See downloaded models&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;ollama pull model_name&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Download a new model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;ollama rm model_name&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Delete a model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;ollama show model_name&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Model details&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;ollama cp src dest&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Copy model to new name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;/bye&lt;/code&gt; (during run)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Exit chat session&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;code&gt;/set system "prompt"&lt;/code&gt; (during run)&lt;/td&gt;
&lt;td style="text-align: left;"&gt;Set one-off system prompt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Customizing an Ollama Model&lt;/h3&gt;
&lt;p&gt;To customize an Ollama model—editing it, setting a system prompt, and saving as a new model—use the following lean workflow and command examples.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Export the Current Modelfile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use the original model as a template:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ollama show llama3 --modelfile &amp;gt; MyModelfile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This creates a file named &lt;code&gt;MyModelfile&lt;/code&gt; with the current model's configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Edit the Modelfile and Set a System Prompt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;MyModelfile&lt;/code&gt; in any text editor (e.g., nano, vim, code):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nano MyModelfile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the file, adjust parameters and add/change a system prompt. For example:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;FROM llama3
PARAMETER temperature 0.7
SYSTEM """
You are a Linux and Bash expert. Only provide concise, correct code with clear explanations.
"""
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build Your Custom Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a new model from the customized Modelfile:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ollama create bash-expert -f MyModelfile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This saves the tailored model under the name &lt;code&gt;bash-expert&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run the Customized Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ollama run bash-expert&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The model will now always respond using your provided system prompt.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;In-Session Quick System Prompt (One-off)&lt;/h3&gt;
&lt;p&gt;During an interactive chat:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;/set system "You are a SQL expert. Explain queries before showing code."
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Applies the system prompt for just that session.&lt;/p&gt;
&lt;p&gt;This process lets you efficiently create, guide, and save your own specialized Ollama models for targeted tasks.&lt;/p&gt;</description><category>agents</category><category>ai</category><category>guide</category><category>ollama</category><guid>https://my-portfolio-app-hxdx6.ondigitalocean.app/posts/ollama-day-1-guide/</guid><pubDate>Fri, 29 Aug 2025 11:59:36 GMT</pubDate></item><item><title>Toyota Used Car Dashboard [Personal project]</title><link>https://my-portfolio-app-hxdx6.ondigitalocean.app/posts/personal-project-toyota-used-car-dashboard/</link><dc:creator>Miguel Fiandor</dc:creator><description>&lt;h2&gt;The Toyota Used Car Market in Spain: with Python Streamlit Dashboard on Google Cloud&lt;/h2&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I built this dashboard to provide some hidden insights about the used car market in Spain. Toyota is probably the most sold brand of the country, and this dashboard allows users to explore Toyota’s used car listings through an interactive web application. The dashboard is built using Python and Streamlit, providing a user-friendly interface for data analysis.
&lt;img alt="Bar charts" src="https://my-portfolio-app-hxdx6.ondigitalocean.app/images/toyota/barcharts-1.png"&gt;&lt;/p&gt;
&lt;h3&gt;Exploring the Dashboard&lt;/h3&gt;
&lt;p&gt;The dashboard is divided into the following sections: geo, counts, price vs mileage, and price ranges. Each section provides python seaborn visualizations and filters to drill down into the data.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mileage vs Price" src="https://my-portfolio-app-hxdx6.ondigitalocean.app/images/toyota/mileage-vs-price.png"&gt;&lt;/p&gt;
&lt;p&gt;It currently contains close to 5000 used Toyota cars listed in Spain, with data sourced from the Toyota España website. Some of the car’s attributes are: model, year, mileage, transmission, fuel, eco badge, price, and dealer location.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table" src="https://my-portfolio-app-hxdx6.ondigitalocean.app/images/toyota/tabla1.png"&gt;&lt;/p&gt;
&lt;p&gt;It maps the dealers’ locations, allowing users to see where the cars are being sold and how many. The dashboard also provides various statistics and analytics, such as the number of cars registered per year, the most common car packages, and the distribution of prices by model and package.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Map of Dealers" src="https://my-portfolio-app-hxdx6.ondigitalocean.app/images/toyota/map2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Technology Stack&lt;/h3&gt;
&lt;p&gt;The project is divided into two modules:
The ETL (Extract, Transform, Load) module, which scrapes the Toyota España website to gather used car data, clean and transform it, to store it in a local SQLite database.
The dashboard Streamlit app, which provides Python seaborn data visualizations and extensive filtering capabilities.&lt;/p&gt;
&lt;h4&gt;The ETL Module&lt;/h4&gt;
&lt;p&gt;Here I used the Python requests library to scrape the Toyota España website, extracting data on used cars. After it is converted into a Pandas DataFrame, it is cleaned and transformed to ensure data quality. The cleaned data is then stored in a local SQLite database for easy access by the dashboard.&lt;/p&gt;
&lt;h4&gt;The Dashboard Module&lt;/h4&gt;
&lt;p&gt;The dashboard is built using Streamlit, a powerful framework for creating interactive web applications in Python. It provides a user-friendly interface for exploring the used car data, with various filters and visualizations to help users gain insights into the market.
It has enabled a simple Authentication using the streamlit_authenticator extension.&lt;/p&gt;
&lt;p&gt;User/pass: demo/cars&lt;/p&gt;
&lt;p&gt;It is deployed on Google Cloud Run with a repository type. This eases the deployment process by automatically building the container image from the source code in the repository with any updates on the main branch.
The ETL is scheduled to run on Tuesdays and Fridays with Github Actions, thanks to the workflow file that runs the full ETL process and updates the local SQLite database with the latest data, and finally pushes the new db to Github.&lt;/p&gt;
&lt;h3&gt;Conclusion: Empowering Your Used Toyota Search&lt;/h3&gt;
&lt;p&gt;This dashboard empowers users with data-driven insights understanding the market trends in Spain. It provides a comprehensive view of the used car listings, allowing future car buyers to make a better deal based on various factors such as price, mileage, car status, and dealer location.&lt;/p&gt;
&lt;h4&gt;You can find me on:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedIn&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;X / Twitter&lt;/li&gt;
&lt;/ul&gt;</description><category>dashboard</category><category>GCP</category><category>python</category><category>seaborn</category><category>streamlit</category><guid>https://my-portfolio-app-hxdx6.ondigitalocean.app/posts/personal-project-toyota-used-car-dashboard/</guid><pubDate>Fri, 30 May 2025 12:26:06 GMT</pubDate></item></channel></rss>